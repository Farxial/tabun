minimum-vagga: v0.6.1

_templates:
  local_volumes: &local_volumes
  /config: !BindRO /work/config/local

containers:
  _base_alpine:
    setup:
    - !Alpine v3.4
    - !EnsureDir /config
    - !Sh "chmod +r /bin/bbsuid"

  static:
    setup:
    - !Container _base_alpine
    - !NpmDependencies
      file: package.json
      peer: true
      optional: true
      dev: true
    environ:
      NODE_PATH: /usr/lib/node_modules

  celery:
    setup:
    - !Container _base_alpine
    - !Install [python3]
    - !PipConfig
      dependencies: true
    - !Py3Install
      - celery[redis]
      - beautifulsoup4

  memcached:
    setup:
    - !Container _base_alpine
    - !Install [memcached]

  redis:
    setup:
    - !Container _base_alpine
    - !Install [redis]
    - !EnsureDir /storage
    volumes:
      <<: *local_volumes
      /storage: !Persistent {name: redis}

  nginx:
    setup:
    - !Container _base_alpine
    - !Install [nginx]
    - !EnsureDir /storage
    volumes:
      <<: *local_volumes
      /storage: !Persistent {name: storage}
      /var/log/nginx: !Snapshot

  mysql:
    setup:
    - !Container _base_alpine
    - !Install
      - mariadb
      - mariadb-client
    volumes:
      <<: *local_volumes
      /var/lib/mysql: !Persistent {name: mysql}

  php:
    setup:
    - !Alpine v3.4
    - !Sh "chmod +r /bin/bbsuid"
    - !AlpineRepo {branch: edge, repo: main, tag: main}
    - !AlpineRepo {branch: edge, repo: testing, tag: testing}
    - !AlpineRepo {branch: edge, repo: community, tag: community}
    - !Install
      - php5-fpm@main
      - php5-mysql
      - php5-mcrypt
      - php5-memcache
      - php5-redis@testing
      - php5-xdebug@community
      - php5-gettext
    - !Download
      url: https://curl.haxx.se/ca/cacert.pem
      path: /etc/cacert.pem
    - !Copy
      source: /work/config/local/xdebug.ini
      path: /etc/php5/conf.d/xdebug.ini
    - !Copy
      source: /work/config/local/app.pool.conf
      path: /etc/php5/fpm.d/app.pool.conf
    - !EnsureDir /log
    - !EnsureDir /config
    - !EnsureDir /storage
    volumes:
      <<: *local_volumes
      /storage: !Persistent {name: storage}
      /log: !Persistent {name: php_log}
      /var/log: !Snapshot

commands:
  _init_db: !Command
    description: Initialize MySQL database
    container: mysql
    environ:
      DB_HOST: 127.0.0.1
      DB_DATABASE: tabun
      DB_USERNAME: tabun
      DB_PASSWORD: tabun
    run: |
      mysql_install_db
      mysqld_safe --defaults-extra-file=/config/mysql.conf --skip-syslog --no-auto-restart
      while [ ! -f /tmp/mysqld.pid ]; do sleep 0.1; done
      mysqladmin --defaults-extra-file=/config/mysql.conf create $DB_DATABASE
      mysql --defaults-extra-file=/config/mysql.conf -e "CREATE USER '$DB_USERNAME'@'$DB_HOST' IDENTIFIED BY '$DB_PASSWORD';"
      mysql --defaults-extra-file=/config/mysql.conf -e "GRANT ALL PRIVILEGES ON $DB_DATABASE.* TO '$DB_USERNAME'@'$DB_HOST';"
      mysqladmin --defaults-extra-file=/config/mysql.conf flush-privileges
      mysqladmin --defaults-extra-file=/config/mysql.conf shutdown

  build-static: !Command
    container: static
    description: Build static files using webpack
    run: [webpack, --progress]

  watch-static: !Command
    container: static
    description: Watch and auto-rebuild changed static files
    run: [webpack, --progress, --watch]

  webpack: !Command
    container: static
    description: Webpack CLI
    run: [webpack]

  redis: &redis !Command
    container: redis
    description: Run redis server (cache and broker for celery)
    run: redis-server /config/redis.conf

  nginx: &nginx !Command
    container: nginx
    description: Run nginx webserver
    run: nginx -c /config/nginx.conf

  mysql: &mysql !Command
    container: mysql
    description: Run mysql database server
    user-id: 1
    external-user-id: 0
    run: mysqld_safe --defaults-extra-file=/config/mysql.conf --skip-syslog --console --debug-gdb

  mail: &mail !Command
    container: celery
    description: Run simple mail server (just for test)
    run: python3 -m smtpd -c DebuggingServer -d -n 127.0.0.1:1025

  celery: &celery !Command
    container: celery
    description: Run celery worker for async tasks
    user-id: 1
    group-id: 1
    external-user-id: 0
    work-dir: celery_tasks
    run: celery worker --config=celeryconfig --pool=solo

  memcached: &memcached !Command
    container: memcached
    description: Run memcached
    run: memcached -m128 -uroot -p11211 -l127.0.0.1

  php: &php !Command
    container: php
    description: Run php-fpm (application)
    user-id: 1
    external-user-id: 0
    run: [php-fpm, -eFO]

  run: !Supervise
    description: Run full server stack
    kill-unresponsive-after: 5
    children:
      redis: *redis
      nginx: *nginx
      mysql: *mysql
      mail: *mail
      celery: *celery
      memcached: *memcached
      php: *php